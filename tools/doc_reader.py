import os
import shlex
import pdfplumber
from typing import List, Optional
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.vectorstores import FAISS
from langchain.embeddings import OpenAIEmbeddings
from langchain.schema import Document
from langchain_openai import ChatOpenAI
from langchain.chains import RetrievalQA

class DocumentReaderTool:
    def __init__(self):
        self.embeddings = OpenAIEmbeddings()
        self.text_splitter = RecursiveCharacterTextSplitter(
            chunk_size=1000,
            chunk_overlap=200
        )
        self.vectorstore = None
        self.current_doc = None
        self.llm = ChatOpenAI(temperature=0.3)

    def read_document(self, query: str) -> str:
        """
        Lit un document PDF et r√©pond aux questions dessus.
        Format attendu : "file:chemin/vers/fichier.pdf question optionnelle"
        """
        try:
            # Parsing plus robuste
            file_path, question = self._parse_query(query)
            
            if not file_path:
                return "‚ùå Format attendu : 'file:chemin/vers/fichier.pdf question optionnelle'"

            # V√©rification de l'existence du fichier
            if not os.path.exists(file_path):
                return f"‚ùå Fichier non trouv√© : {file_path}"

            # V√©rification de l'extension
            if not file_path.lower().endswith('.pdf'):
                return "‚ùå Seuls les fichiers PDF sont support√©s."

            # Extraction du texte
            text_content = self._extract_pdf_text(file_path)
            if not text_content.strip():
                return "‚ùå Le texte du PDF est vide ou non lisible."

            # Cr√©ation de la base vectorielle
            documents = self._create_documents(text_content, file_path)
            self.vectorstore = FAISS.from_documents(documents, self.embeddings)
            self.current_doc = file_path

            # G√©n√©ration de la r√©ponse
            response = self._generate_response(question, os.path.basename(file_path))
            return response

        except Exception as e:
            return f"‚ùå Erreur lors de l'analyse du document : {str(e)}"

    def _parse_query(self, query: str) -> tuple[Optional[str], str]:
        """
        Parse la requ√™te pour extraire le chemin du fichier et la question
        """
        try:
            if not query.startswith("file:"):
                return None, ""
            
            # Supprime le pr√©fixe "file:"
            query_without_prefix = query[5:]
            
            # Utilise shlex pour g√©rer les espaces dans les chemins
            parts = shlex.split(query_without_prefix)
            
            if not parts:
                return None, ""
            
            file_path = parts[0]
            question = " ".join(parts[1:]) if len(parts) > 1 else "Fais un r√©sum√© d√©taill√© de ce document"
            
            return file_path, question
            
        except Exception:
            # Si shlex √©choue, essaie un parsing simple
            query_without_prefix = query[5:].strip()
            if ' ' in query_without_prefix:
                # Trouve le premier espace apr√®s l'extension .pdf
                pdf_end = query_without_prefix.find('.pdf')
                if pdf_end != -1:
                    pdf_end += 4  # Ajoute la longueur de '.pdf'
                    file_path = query_without_prefix[:pdf_end]
                    question = query_without_prefix[pdf_end:].strip()
                    return file_path, question if question else "Fais un r√©sum√© d√©taill√© de ce document"
            
            return query_without_prefix, "Fais un r√©sum√© d√©taill√© de ce document"

    def _extract_pdf_text(self, file_path: str) -> str:
        """
        Extraction du texte d'un PDF via pdfplumber
        """
        try:
            text = ""
            with pdfplumber.open(file_path) as pdf:
                for page_num, page in enumerate(pdf.pages, 1):
                    try:
                        page_text = page.extract_text()
                        if page_text:
                            text += f"\n--- Page {page_num} ---\n{page_text}\n"
                    except Exception as e:
                        print(f"Erreur sur la page {page_num}: {e}")
                        continue
            
            return text.strip()
            
        except Exception as e:
            raise Exception(f"Erreur lors de l'extraction PDF : {str(e)}")

    def _create_documents(self, text: str, source: str) -> List[Document]:
        """
        Divise le texte en chunks pour la vectorisation
        """
        chunks = self.text_splitter.split_text(text)
        documents = []
        
        for i, chunk in enumerate(chunks):
            if chunk.strip():  # Ignore les chunks vides
                doc = Document(
                    page_content=chunk,
                    metadata={
                        "source": source,
                        "chunk": i,
                        "total_chunks": len(chunks)
                    }
                )
                documents.append(doc)
        
        return documents

    def _generate_response(self, question: str, filename: str) -> str:
        """
        G√©n√®re une r√©ponse contextuelle bas√©e sur le document
        """
        try:
            # Utilise RetrievalQA pour une r√©ponse plus intelligente
            qa_chain = RetrievalQA.from_chain_type(
                llm=self.llm,
                chain_type="stuff",
                retriever=self.vectorstore.as_retriever(search_kwargs={"k": 4}),
                return_source_documents=True
            )
            
            # Am√©liore la question pour un meilleur contexte
            enhanced_question = f"""
            Bas√© sur le document '{filename}', r√©ponds √† la question suivante de mani√®re d√©taill√©e et structur√©e.
            
            Question: {question}
            
            Assure-toi de:
            1. Donner une r√©ponse compl√®te et pr√©cise
            2. Utiliser des exemples du document si pertinents
            3. Structurer ta r√©ponse clairement
            4. Mentionner si certaines informations ne sont pas disponibles dans le document
            """
            
            result = qa_chain({"query": enhanced_question})
            
            response = f"üìÑ **Analyse du document :** *{filename}*\n\n"
            response += f"**Question pos√©e :** {question}\n\n"
            response += f"**R√©ponse :**\n\n{result['result']}\n\n"
            
            # Ajoute des informations sur les sources si disponibles
            if 'source_documents' in result and result['source_documents']:
                response += f"**Sources utilis√©es :** {len(result['source_documents'])} sections du document\n"
            
            return response
            
        except Exception as e:
            # Fallback sur la m√©thode simple si RetrievalQA √©choue
            return self._simple_response(question, filename)

    def _simple_response(self, question: str, filename: str) -> str:
        """
        M√©thode de fallback pour g√©n√©rer une r√©ponse simple
        """
        try:
            # Recherche de similarit√© simple
            relevant_docs = self.vectorstore.similarity_search(question, k=3)
            context = "\n\n".join([doc.page_content for doc in relevant_docs])
            
            response = f"üìÑ **Analyse du document :** *{filename}*\n\n"
            response += f"**Question pos√©e :** {question}\n\n"
            response += f"**Contenu pertinent trouv√© :**\n\n{context[:2000]}"
            
            if len(context) > 2000:
                response += "\n\n... (contenu tronqu√©)"
            
            return response
            
        except Exception as e:
            return f"‚ùå Erreur lors de la g√©n√©ration de la r√©ponse : {str(e)}"

    def get_document_info(self) -> str:
        """
        Retourne des informations sur le document actuellement charg√©
        """
        if not self.current_doc:
            return "Aucun document charg√©."
        
        return f"Document actuel : {os.path.basename(self.current_doc)}"